Desafío 9: Comandos hechos en Mongo Shell.
Amoretti Federico.

1. Crear una base de datos llamada "ecommerce", que contenga dos colecciones : mensajes y productos.
use ecommerce.

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro",
    price: 750,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

3. Agregar 10 documentos con valores distintos a las colecciones mensajes y productos.

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?1",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?2",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?3",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?4",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?5",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?6",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?7",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?8",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?9",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.messages.insertOne({
    id: ObjectId(),
    message: "Hola, como estas?10",
    date: new Date().toLocaleString("es-AR"),
    email: "pregunta@email.com"
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro1",
    price: 100,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro2",
    price: 200,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro3",
    price: 300,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro4",
    price: 400,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro5",
    price: 500,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro6",
    price: 1200,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro7",
    price: 1800,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro8",
    price: 2550,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro9",
    price: 3800,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro10",
    price: 4500,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

4. Listar todos los documentos en cada colección.
db.messages.find();
db.products.find();

5.Mostrar la cantidad de documentos almacenados en cada una de ellas.
db.messages.countDocuments();
db.products.countDocuments();

6.Realizar un CRUD sobre la colección de productos
6.1 Agregar un producto más en la colección de productos:

db.products.insertOne({
    id: ObjectId(),
    name: "El Gato Negro11",
    price: 3200,
    img: "https://octaedro.com/wp-content/uploads/2019/04/12435-1.jpg",
    author: "Edgar Alan Poe",
    publication_year: 1843
});

6.2 Realizar una consulta por nombre de producto específico:

db.products.findOne({name: "El Gato Negro5"});

6.3 Listar los productos con precio menor a 1000 pesos.

db.products.find( { price: { $lt: 1000 } } );

6.4 Listar los productos con precio entre los 1000 a 3000 pesos.

db.products.find( { $and: [ { price: { $gte: 1000 } }, { price: { $lte: 3000 } } ] } );

6.5 Listar los productos con precio mayor a 3000 pesos.

db.products.find( { price: { $gt: 3000 } } );

6.6 Realizar una consulta que traiga sólo el nombre del tercer producto más barato.

products = db.products.find({}, {_id: 0, id: 0, img: 0, artist: 0, release_year: 0}).sort({price: 1}).toArray();
products[2];

6.7 Hacer una actualización sobre todos los productos, agregando el campo stock a todos ellos con un valor de 100.

db.products.updateMany({},{$set: { stock: 100 }});

6.8 Cambiar el stock a cero de los productos con precios mayores a 4000 pesos.

db.products.updateMany({price: {$gte: 4000 }},{$set: { stock: 0 }});

6.9 Borrar los productos con precio menor a 1000 pesos.

db.products.deleteMany({price: {$lt: 1000}});

6.10 Crear un usuario 'pepe' clave: 'asd456' que sólo pueda leer la base de datos ecommerce. Verificar que pepe no pueda cambiar la información.

db.createUser({user: "pepe",pwd: "asd456", roles: [{role:"read", db: "ecommerce"}]});

Testeamos

db.auth("pepe","asd456");
db.products.find();
db.products.deleteMany({price: {$lt: 10000}})
